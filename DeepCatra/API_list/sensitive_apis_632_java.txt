//catradroid„ÄÅsourcesAndSinks of flowDroid and sourcesAndSink of taintDroid:
<android.telephony.TelephonyManager: java.lang.String getDeviceId()>
<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>
<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>
<android.telephony.TelephonyManager: java.lang.String getLine1Number()>
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<java.net.URLConnection: java.io.InputStream getInputStream()>
<android.media.MediaRecorder: void setVideoSource(int)>

//catradroid and sourcesAndSinks of flowDroid:
<java.net.URLConnection: void connect()>
<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>
<java.net.URL: java.io.InputStream openStream()>
<java.net.URL: java.lang.Object getContent()>

//catradroid and sourcesAndSink of taintDroid:
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>

//sourcesAndSinks of flowDroid and sourcesAndSink of taintDroid:
<android.telephony.gsm.GsmCellLocation: int getCid()>
<android.telephony.gsm.GsmCellLocation: int getLac()>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.media.MediaRecorder: void start()>
<java.net.URLConnection: java.io.OutputStream getOutputStream()>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.media.AudioRecord: int read(short[],int,int)>
<android.media.AudioRecord: int read(byte[],int,int)>
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)>
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)>

//sourcesAndSinks of flowDroid:
<java.net.Socket: void connect(java.net.SocketAddress)>
<com.google.auth.oauth2.DefaultCredentialsProvider: com.google.auth.oauth2.GoogleCredentials getDefaultCredentials(com.google.api.client.http.HttpTransport)>
<com.google.auth.oauth2.UserAuthorizer: com.google.auth.oauth2.UserCredentials getCredentialsFromCode(java.lang.String,java.net.URI)>
<com.google.auth.oauth2.DefaultCredentialsProvider: com.google.auth.oauth2.GoogleCredentials getDefaultCredentialsUnsynchronized(com.google.api.client.http.HttpTransport)>
<com.google.auth.oauth2.DefaultCredentialsProvider: java.io.File getWellKnownCredentialsFile)>
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>
<android.net.wifi.WifiInfo: java.lang.String getSSID()>
<java.io.File: boolean delete()>
<android.provider.Browser: android.database.Cursor getAllBookmarks()>
<android.provider.Browser: android.database.Cursor getAllVisitedUrls()>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>
<org.springframework.security.config.http.CsrfBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition getCsrfLogoutHandler)>
<org.springframework.security.config.http.FormLoginBeanDefinitionParser: java.lang.String getLoginPage)>
<org.springframework.security.config.http.FormLoginBeanDefinitionParser: java.lang.String getLoginProcessingUrl)>
<org.springframework.security.config.http.LogoutBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition getLogoutRequestMatcher(java.lang.String)>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.Activity: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.app.Activity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<java.net.URL: java.lang.Object getContent(java.lang.Class[])>
<org.apache.xmlrpc.webserver.XmlRpcServletServer: org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl getConfig(javax.servlet.http.HttpServletRequest)>
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>
<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)>
<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)>
<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)>
<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)>
<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>
<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>
<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>
<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>
<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>
<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>
<org.apache.xmlrpc.webserver.ConnectionServer: void writeResponse(org.apache.xmlrpc.common.XmlRpcStreamRequestConfig,java.io.OutputStream,java.lang.Object)>

//catradroid:
<android.content.BroadcastReceiver: void abortBroadcast()>
<org.apache.http.impl.client.AbstractHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<sun.net.www.protocol.http.HttpURLConnection: void connect()>
<java.net.URL: java.net.URLConnection openConnection()>
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
<android.os.Vibrator: void vibrate(long[],int)>
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>
<android.support.v4.net.ConnectivityManagerCompat$ConnectivityManagerCompatImpl: boolean isActiveNetworkMetered(android.net.ConnectivityManager)>
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge: boolean performAction(int,int,android.os.Bundle)>
<android.hardware.Camera: android.hardware.Camera open()>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<android.os.PowerManager$WakeLock: void acquire(long)>
<android.support.v4.net.ConnectivityManagerCompatGingerbread: boolean isActiveNetworkMetered(android.net.ConnectivityManager)>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat: boolean performAction(int,int,android.os.Bundle)>
<android.support.v4.net.ConnectivityManagerCompatHoneycombMR2: boolean isActiveNetworkMetered(android.net.ConnectivityManager)>
<android.media.Ringtone: void play()>
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>
<android.bluetooth.BluetoothAdapter: boolean isEnabled()>
<android.app.NotificationManager: void notify(int,android.app.Notification)>
<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>
<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>
<android.support.v4.net.ConnectivityManagerCompatJellyBean: boolean isActiveNetworkMetered(android.net.ConnectivityManager)>
<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>
<java.net.HttpURLConnection: void connect()>
<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>
<android.webkit.WebView: void <init>(android.content.Context)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<android.bluetooth.BluetoothAdapter: boolean isDiscovering()>
<android.location.LocationManager: java.util.List getProviders(boolean)>
<android.os.PowerManager$WakeLock: void acquire()>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<android.os.PowerManager$WakeLock: void release()>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>
<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int,boolean)>
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
<android.widget.VideoView: void pause()>
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>
<android.app.KeyguardManager$KeyguardLock: void disableKeyguard()>
<android.widget.VideoView: void start()>
<android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()>
<android.media.AudioRecord: void <init>(int,int,int,int,int)>
<android.media.AudioManager: void setSpeakerphoneOn(boolean)>
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
<android.os.Vibrator: void cancel()>
<android.os.Vibrator: void vibrate(long)>
<android.net.wifi.WifiManager: boolean isWifiEnabled()>
<android.media.MediaPlayer: void stop()>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.media.MediaPlayer: void start()>
<android.media.MediaPlayer: void reset()>
<android.media.MediaPlayer: void pause()>
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<android.media.MediaPlayer: void release()>
<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>
<android.widget.VideoView: void setVideoURI(android.net.Uri)>
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<android.widget.VideoView: void resume()>
<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>
<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>
<android.media.MediaRecorder: void setAudioSource(int)>
<android.content.ContentResolver: void setMasterSyncAutomatically(boolean)>
<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>
<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<android.net.wifi.WifiManager: boolean startScan()>
<android.net.wifi.WifiManager$WifiLock: void acquire()>
<android.net.wifi.WifiManager: java.util.List getScanResults()>
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>
<android.net.wifi.WifiManager$WifiLock: void release()>
<com.android.inputmethod.latin.ContactsDictionary: void loadDictionary()>
<com.android.inputmethod.latin.LatinIME: void launchSettings()>
<com.android.inputmethod.latin.ExpandableDictionary: boolean isValidWord(java.lang.CharSequence)>
<com.android.inputmethod.latin.LatinIME: void handleClose()>
<com.android.inputmethod.latin.ContactsDictionary: void <init>(android.content.Context,int)>
<com.android.inputmethod.latin.UserDictionary: void loadDictionaryAsync()>
<com.android.inputmethod.latin.ExpandableDictionary: boolean reloadDictionaryIfRequired()>
<com.android.inputmethod.latin.LatinIME: void loadSettings()>
<com.android.inputmethod.latin.UserDictionary: boolean isValidWord(java.lang.CharSequence)>
<android.speech.SpeechRecognizer: void cancel()>
<com.android.inputmethod.latin.LatinIME: void switchToKeyboardView()>
<com.android.inputmethod.latin.ExpandableDictionary: void <init>(android.content.Context,int)>
<com.android.inputmethod.latin.Dictionary: boolean isValidWord(java.lang.CharSequence)>
<com.android.inputmethod.latin.LatinIME: boolean addWordToDictionary(java.lang.String)>
<com.android.inputmethod.latin.LatinIME: void updateSuggestions()>
<com.android.inputmethod.latin.UserDictionary: void loadDictionary()>
<com.android.inputmethod.latin.UserDictionary: void <init>(android.content.Context,java.lang.String)>
<com.android.inputmethod.latin.ExpandableDictionary: void startDictionaryLoadingTaskLocked()>
<com.android.inputmethod.latin.ExpandableDictionary: void loadDictionaryAsync()>
<android.app.WallpaperManager: void setStream(java.io.InputStream)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>
<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>
<android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>
<android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.widget.VideoView: void suspend()>
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>
<java.net.ServerSocket: void <init>(int)>
<java.net.ServerSocket: void bind(java.net.SocketAddress)>
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
<android.content.ContentResolver: boolean getMasterSyncAutomatically()>
<android.bluetooth.BluetoothAdapter: boolean disable()>
<android.bluetooth.BluetoothAdapter: boolean enable()>
<android.media.AudioManager: boolean isWiredHeadsetOn()>
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>
<android.provider.Settings$System: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.net.wifi.WifiManager: int getWifiState()>
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>
<android.media.AudioManager: void startBluetoothSco()>
<android.media.AudioManager: void setBluetoothScoOn(boolean)>
<android.media.AudioManager: void stopBluetoothSco()>
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>
<android.nfc.NfcAdapter: void setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback,android.app.Activity)>
<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,android.app.Activity[])>
<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity[])>
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: boolean disableNetwork(int)>
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>
<android.net.wifi.WifiManager: boolean saveConfiguration()>
<android.net.wifi.WifiManager: boolean reassociate()>
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>
<android.net.wifi.WifiManager: boolean removeNetwork(int)>
<com.google.common.io.Resources: java.lang.Object readLines(java.net.URL,char,com.google.common.io.LineProcessor)>
<android.bluetooth.BluetoothDevice: java.lang.String getName()>
<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>
<android.media.AudioManager: void setMode(int)>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>
<android.bluetooth.BluetoothAdapter: int getState()>
<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>
<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>
<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>
<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])>
<android.nfc.tech.Ndef: void connect()>
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<android.nfc.tech.Ndef: void close()>
<android.nfc.NfcAdapter: void disableForegroundDispatch(android.app.Activity)>
<com.google.common.io.MultiReader: void advance()>
<com.google.common.io.Files: void copy(java.io.File,java.io.File)>
<com.google.common.io.MultiInputStream: int read()>
<com.google.common.io.Files: java.lang.Object readLines(java.io.File,char,com.google.common.io.LineProcessor)>
<com.google.common.io.MultiInputStream: void <init>(java.util.Iterator)>
<com.google.common.io.InputSupplier: java.lang.Object getInput()>
<com.google.common.io.MultiReader: int read(char[],int,int)>
<com.google.common.io.CharStreams: java.lang.Object readLines(com.google.common.io.InputSupplier,com.google.common.io.LineProcessor)>
<com.google.common.io.MultiInputStream: void advance()>
<com.google.common.io.ByteStreams: java.lang.Object readBytes(com.google.common.io.InputSupplier,com.google.common.io.ByteProcessor)>
<com.google.common.io.MultiInputStream: int read(byte[],int,int)>
<com.google.common.io.MultiReader: void <init>(java.util.Iterator)>
<android.net.wifi.WifiManager: boolean disconnect()>
<android.net.wifi.WifiManager: boolean reconnect()>
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.app.WallpaperManager: void clear()>
<android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.app.WallpaperManager: void setResource(int)>
<com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,java.lang.Appendable)>
<com.google.common.io.CharStreams: java.lang.String readFirstLine(com.google.common.io.InputSupplier)>
<com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,java.io.OutputStream)>
<com.google.common.io.ByteStreams: long getChecksum(com.google.common.io.InputSupplier,java.util.zip.Checksum)>
<com.google.common.io.ByteStreams: byte[] toByteArray(com.google.common.io.InputSupplier)>
<com.google.common.io.ByteStreams: byte[] getDigest(com.google.common.io.InputSupplier,java.security.MessageDigest)>
<com.google.common.io.CharStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)>
<com.google.common.io.Files: byte[] toByteArray(java.io.File)>
<com.google.common.io.CharStreams: java.util.List readLines(com.google.common.io.InputSupplier)>
<com.google.common.io.CharStreams: java.lang.StringBuilder toStringBuilder(com.google.common.io.InputSupplier)>
<android.content.ContentResolver: android.content.SyncInfo getCurrentSync()>
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>
<com.google.common.io.CharStreams: java.lang.String toString(com.google.common.io.InputSupplier)>
<android.content.ContentResolver: java.util.List getCurrentSyncs()>
<android.bluetooth.BluetoothDevice: int getBondState()>
<com.google.common.io.ByteStreams: boolean equal(com.google.common.io.InputSupplier,com.google.common.io.InputSupplier)>
<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>
<com.google.common.io.ByteStreams: long copy(com.google.common.io.InputSupplier,com.google.common.io.OutputSupplier)>
<com.google.common.io.Files: void copy(com.google.common.io.InputSupplier,java.io.File)>
<com.google.common.io.Resources$1: java.io.InputStream getInput()>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>
<com.google.common.io.CharStreams$4: java.io.Reader getInput()>
<com.google.common.io.ByteStreams$5: java.io.InputStream getInput()>
<com.google.common.io.CharStreams$2: java.io.InputStreamReader getInput()>
<com.google.common.io.ByteStreams$4: java.io.InputStream getInput()>
<android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)>
<android.media.AudioManager: boolean isBluetoothA2dpOn()>
<android.net.wifi.WifiManager$MulticastLock: void release()>
<android.net.wifi.WifiManager$MulticastLock: void acquire()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<android.bluetooth.BluetoothSocket: void connect()>
<android.media.Ringtone: void stop()>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.support.v4.net.ConnectivityManagerCompat: boolean isActiveNetworkMetered(android.net.ConnectivityManager)>
<com.android.internal.telephony.ITelephony: boolean endCall()>
<android.media.AudioManager: void setMicrophoneMute(boolean)>
<android.bluetooth.BluetoothAdapter: java.lang.String getName()>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>
<android.media.AudioManager: void setParameters(java.lang.String)>
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>
<android.media.effect.EffectContext: void release()>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)>
<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity[])>
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
<android.location.LocationManager: void removeTestProvider(java.lang.String)>
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<android.net.ConnectivityManager: void setNetworkPreference(int)>
<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>
<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<android.media.Ringtone: void setStreamType(int)>
<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>
<android.webkit.WebViewFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
<android.media.RingtoneManager: void stopPreviousRingtone()>
<com.google.common.io.Files: java.lang.String toString(java.io.File,char)>
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)>
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)>
<android.bluetooth.BluetoothAdapter: int getScanMode()>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.os.storage.IMountService$Stub: int[] getStorageUsers(java.lang.String)>
<android.os.storage.IMountService: void setUsbMassStorageEnabled(boolean)>
<android.os.storage.IMountService$Stub: void setUsbMassStorageEnabled(boolean)>
<android.os.storage.IMountService$Stub: void unmountVolume(java.lang.String,boolean,boolean)>
<android.os.IPowerManager$Stub: void setStayOnSetting(int)>
<android.os.IVibratorService$Stub: void cancelVibrate(android.os.IBinder)>
<android.os.storage.IMountService$Stub: void finishMediaUpdate()>
<android.os.IPowerManager$Stub: void releaseWakeLock(android.os.IBinder,int)>
<android.os.storage.IMountService$Stub: int formatVolume(java.lang.String)>
<android.os.PowerManager$WakeLock: void release(int)>
<android.os.storage.IMountService$Stub: int mountVolume(java.lang.String)>
<android.os.PowerManager$WakeLock: void acquireLocked()>
<android.os.storage.IMountService$Stub: void shutdown(android.os.storage.IMountShutdownObserver)>
<android.os.IPowerManager: void releaseWakeLock(android.os.IBinder,int)>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<android.net.IConnectivityManager: boolean requestRouteToHostAddress(int,byte[])>
<com.android.mms.util.AddressUtils: java.lang.String getFrom(android.content.Context,android.net.Uri)>
<com.android.mms.util.Recycler$MmsRecycler: void deleteOldMessagesInSameThreadAsMessage(android.content.Context,android.net.Uri)>
<com.android.mms.data.Conversation: android.net.Uri getUri()>
<com.android.mms.util.DraftCache: void rebuildCache()>
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[])>
<com.android.mms.data.Contact$ContactsCache: com.android.mms.data.Contact getContactInfoForEmailAddress(java.lang.String)>
<com.android.mms.transaction.NotificationTransaction: void sendNotifyRespInd(int)>
<android.net.IConnectivityManager: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)>
<com.android.mms.transaction.NotificationTransaction: void notifyObservers()>
<android.net.ConnectivityManager: boolean requestRouteToHostAddress(int,java.net.InetAddress)>
<com.android.mms.data.Conversation: void blockingMarkAllSmsMessagesAsSeen(android.content.Context)>
<com.android.mms.transaction.Transaction: void process()>
<com.android.mms.data.Conversation: void asyncDeleteObsoleteThreads(android.content.AsyncQueryHandler,int)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<com.android.mms.transaction.NotificationTransaction: void <init>(android.content.Context,int,com.android.mms.transaction.TransactionSettings,java.lang.String)>
<com.android.mms.transaction.NotificationTransaction: byte[] getPdu(java.lang.String)>
<com.android.mms.transaction.SendTransaction: byte[] sendPdu(long,byte[])>
<com.android.mms.transaction.ReadRecTransaction: byte[] sendPdu(byte[])>
<com.android.mms.transaction.Observer: void update(com.android.mms.transaction.Observable)>
<com.android.mms.data.Conversation: boolean loadFromThreadId(long,boolean)>
<com.android.mms.data.Conversation: void blockingMarkAllMmsMessagesAsSeen(android.content.Context)>
<android.net.IConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>
<com.android.mms.data.Contact: android.net.Uri getUri()>
<android.net.IConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>
<com.android.mms.util.DraftCache: void access$000(com.android.mms.util.DraftCache)>
<com.android.mms.util.DownloadManager: java.lang.String getMessage(android.net.Uri)>
<android.net.IConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>
<com.android.mms.transaction.RetryScheduler: boolean isConnected()>
<com.android.mms.transaction.RetryScheduler: void scheduleRetry(android.net.Uri)>
<com.android.mms.transaction.RetryScheduler: int getRetrieveStatus(long)>
<com.android.mms.transaction.Transaction: void ensureRouteToHost(java.lang.String,com.android.mms.transaction.TransactionSettings)>
<com.android.mms.transaction.RetrieveTransaction: void notifyObservers()>
<com.android.mms.transaction.ReadRecTransaction: void notifyObservers()>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<com.android.mms.transaction.RetrieveTransaction: byte[] getPdu(java.lang.String)>
<com.android.mms.transaction.RetryScheduler: int getResponseStatus(long)>
<com.android.mms.util.DownloadManager: void markState(android.net.Uri,int)>
<com.android.mms.transaction.RetryScheduler: void setRetryAlarm(android.content.Context)>
<android.net.IConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>
<com.android.mms.transaction.NotificationTransaction: byte[] sendPdu(byte[],java.lang.String)>
<com.android.mms.transaction.SendTransaction: void notifyObservers()>
<com.android.mms.transaction.HttpUtils: byte[] httpConnection(android.content.Context,long,java.lang.String,byte[],int,boolean,java.lang.String,int)>
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[],java.lang.String)>
<com.android.mms.transaction.Transaction: byte[] sendPdu(long,byte[],java.lang.String)>
<com.android.mms.transaction.RetrieveTransaction: byte[] sendPdu(byte[])>
<android.net.IConnectivityManager: boolean isActiveNetworkMetered()>
<android.nfc.tech.Ndef: void writeNdefMessage(android.nfc.NdefMessage)>
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.util.Set)>
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)>
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)>
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)>
<android.provider.Settings$Secure: void setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)>
<android.content.Context: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<com.android.gallery3d.app.Gallery: void initializeByIntent()>
<com.android.gallery3d.app.AlbumPage: void onLongTap(int)>
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object executeAndWait(java.util.concurrent.Callable)>
<com.android.gallery3d.app.ActivityState: void resume()>
<com.android.gallery3d.app.ActivityState: void onStateResult(int,int,android.content.Intent)>
<com.android.gallery3d.app.StateManager: void onBackPressed()>
<com.android.gallery3d.app.PhotoDataAdapter: void updateCurrentIndex(int)>
<com.android.gallery3d.app.AbstractGalleryActivity: void onPause()>
<com.android.gallery3d.app.Gallery: void startViewAction(android.content.Intent)>
<com.android.gallery3d.app.ActivityState: void onCreate(android.os.Bundle,android.os.Bundle)>
<com.android.gallery3d.app.AlbumDataLoader: void resume()>
<com.android.gallery3d.app.AlbumSetPage: void onSingleTapUp(int)>
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int)>
<com.android.gallery3d.app.AbstractGalleryActivity: void onResume()>
<com.android.gallery3d.app.StateManager: void switchState(com.android.gallery3d.app.ActivityState,java.lang.Class,android.os.Bundle)>
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)>
<com.android.gallery3d.app.AlbumPage: void onSingleTapUp(int)>
<com.android.gallery3d.app.PhotoPage$Model: void resume()>
<com.android.gallery3d.app.PhotoPage: void onCommitDeleteImage()>
<com.android.gallery3d.app.AlbumSetPage: void pickAlbum(int)>
<com.android.gallery3d.app.PhotoPage: void setCurrentPhotoByIntent(android.content.Intent)>
<com.android.gallery3d.app.SlideshowPage: void showPendingBitmap()>
<com.android.gallery3d.app.StateManager: void restoreFromState(android.os.Bundle)>
<com.android.gallery3d.app.AlbumSetPage: void onLongTap(int)>
<com.android.gallery3d.app.SlideshowPage: void initializeViews()>
<com.android.gallery3d.app.AlbumSetDataLoader: void resume()>
<com.android.gallery3d.app.StateManager: void startStateForResult(java.lang.Class,int,android.os.Bundle)>
<com.android.gallery3d.app.AlbumPage: void clearLoadingBit(int)>
<com.android.gallery3d.app.ActivityState: void onResume()>
<com.android.gallery3d.app.AlbumSetPage: void clearLoadingBit(int)>
<com.android.gallery3d.app.ActivityState: void onBackPressed()>
<com.android.gallery3d.app.StateManager: void pause()>
<com.android.gallery3d.app.AlbumPage: void onBackPressed()>
<com.android.gallery3d.app.SlideshowPage: void onBackPressed()>
<com.android.gallery3d.app.StateManager: void resume()>
<com.android.gallery3d.app.ActivityState: void onPause()>
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent: java.lang.Void call()>
<com.android.gallery3d.app.PhotoPage: void onBackPressed()>
<com.android.gallery3d.app.StateManager: void notifyActivityResult(int,int,android.content.Intent)>
<com.android.gallery3d.app.AlbumPage: void onUpPressed()>
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState)>
<com.android.gallery3d.app.StateManager: boolean itemSelected(android.view.MenuItem)>
<com.android.gallery3d.app.StateManager: void startState(java.lang.Class,android.os.Bundle)>
<com.android.gallery3d.app.PhotoDataAdapter: void fireDataChange()>
<com.android.gallery3d.app.AbstractGalleryActivity: void onCreate(android.os.Bundle)>
<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()>
<android.nfc.tech.NdefFormatable: void close()>
<android.nfc.tech.NdefFormatable: void format(android.nfc.NdefMessage)>
<android.nfc.tech.NdefFormatable: void connect()>
<android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)>
<android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)>
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)>
<com.android.mms.model.SlideshowModel: com.google.android.mms.pdu.PduBody getPduBody(android.content.Context,android.net.Uri)>
<android.accounts.AccountManager: void clearPassword(android.accounts.Account)>
<android.nfc.tech.IsoDep: void setTimeout(int)>
<android.nfc.tech.IsoDep: int getTimeout()>
<com.android.inputmethod.latin.LatinIME: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)>
<com.android.inputmethod.latin.LatinIME: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String)>
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView: boolean onTouchEvent(android.view.MotionEvent)>
<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()>
<android.nfc.tech.Ndef: boolean makeReadOnly()>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.bluetooth.BluetoothDevice: boolean createBond()>
<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)>
<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.nfc.tech.IsoDep: void close()>
<android.nfc.tech.IsoDep: void connect()>
<android.nfc.tech.IsoDep: byte[] transceive(byte[])>
<android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)>
<android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)>
<com.android.vcard.VCardEntry: java.util.ArrayList constructInsertOperations(android.content.ContentResolver,java.util.ArrayList)>
<com.android.vcard.VCardEntry: void iterateOneList(java.util.List,com.android.vcard.VCardEntry$EntryElementIterator)>
<com.android.vcard.VCardEntry$EntryElementIterator: boolean onElement(com.android.vcard.VCardEntry$EntryElement)>
<com.android.vcard.VCardEntry$EntryElement: void constructInsertOperation(java.util.List,int)>
<com.android.vcard.VCardEntryHandler: void onEntryCreated(com.android.vcard.VCardEntry)>
<com.android.vcard.VCardEntry: boolean isIgnorable()>
<com.android.vcard.VCardParser: void parse(java.io.InputStream)>
<com.android.vcard.VCardEntry: void iterateAllData(com.android.vcard.VCardEntry$EntryElementIterator)>
<android.nfc.NfcAdapter: void setBeamPushUris(android.net.Uri[],android.app.Activity)>
<android.nfc.NfcAdapter: void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)>
<android.nfc.NfcAdapter: void disableForegroundNdefPush(android.app.Activity)>
<com.android.inputmethod.keyboard.KeyboardActionListener: boolean onCustomRequest(int)>
<com.android.inputmethod.keyboard.PointerTracker: void startLongPressTimer(com.android.inputmethod.keyboard.Key)>
<com.android.inputmethod.keyboard.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressShift()>
<com.android.inputmethod.keyboard.PointerTracker: void startRepeatKey(com.android.inputmethod.keyboard.Key)>
<com.android.inputmethod.keyboard.PointerTracker: void onDownEventInternal(int,int,long)>
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue: void releaseAllPointers(long)>
<com.android.inputmethod.latin.LatinIME: void onStartInputViewInternal(android.view.inputmethod.EditorInfo,boolean)>
<com.android.inputmethod.keyboard.PointerTracker: void onCancelEvent(int,int,long)>
<com.android.inputmethod.latin.LatinIME$UIHandler: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)>
<com.android.inputmethod.keyboard.PointerTracker: void onUpEvent(int,int,long)>
<android.net.wifi.WifiManager: boolean pingSupplicant()>
<com.android.internal.telephony.CallerInfo: int getCallerInfo(android.content.Context,java.lang.String)>
<com.google.android.mms.pdu.PduPersister: void updateHeaders(android.net.Uri,com.google.android.mms.pdu.SendReq)>
<com.google.android.mms.pdu.PduPersister: android.net.Uri persist(com.google.android.mms.pdu.GenericPdu,android.net.Uri)>
<android.media.MediaScanner: android.net.Uri scanSingleFile(java.lang.String,java.lang.String,java.lang.String)>
<com.android.internal.telephony.ITelephony$Stub: boolean endCall()>
<com.android.internal.telephony.ITelephony$Stub: boolean isSimPinEnabled()>
<com.android.internal.telephony.ITelephony$Stub: boolean enableDataConnectivity()>
<com.android.internal.telephony.ITelephony$Stub: boolean disableDataConnectivity()>
<com.android.internal.telephony.ITelephony$Stub: android.os.Bundle getCellLocation()>
<android.provider.Settings$System: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
<android.net.ConnectivityManager: void setMobileDataEnabled(boolean)>
<android.net.ConnectivityManager: boolean getMobileDataEnabled()>
<android.nfc.tech.NdefFormatable: void formatReadOnly(android.nfc.NdefMessage)>
<android.media.AsyncPlayer: void stop()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)>
<com.android.internal.telephony.ISms$Stub: boolean disableCellBroadcast(int)>
<com.android.internal.telephony.ISms$Stub: boolean copyMessageToIccEf(int,byte[],byte[])>
<com.android.internal.telephony.ISms$Stub: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<com.android.internal.telephony.ISms: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)>
<com.android.internal.telephony.ISms$Stub: boolean updateMessageOnIccEf(int,int,byte[])>
<com.android.internal.telephony.ISms$Stub: boolean enableCellBroadcastRange(int,int)>
<com.android.internal.telephony.ISms$Stub: boolean disableCellBroadcastRange(int,int)>
<com.android.internal.telephony.ISms: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<com.android.internal.telephony.ISms$Stub: void sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<com.android.internal.telephony.ISms$Stub: java.util.List getAllMessagesFromIccEf()>
<com.android.internal.telephony.ISms$Stub: boolean enableCellBroadcast(int)>
<com.android.internal.telephony.ISms$Stub: void sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)>
<com.android.inputmethod.latin.LatinIME: void initSuggest()>
<com.android.inputmethod.latin.LatinIME: void handleBackspace(int)>
<com.android.inputmethod.latin.LatinIME: boolean handleSeparator(int,int,int,int)>
<com.android.inputmethod.latin.LatinIME: void onCodeInput(int,int,int)>
<com.android.inputmethod.latin.LatinIME: void handleCharacter(int,int,int,int)>
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>
<android.net.wifi.WifiManager: boolean isWifiApEnabled()>
<android.net.wifi.WifiManager: boolean setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>
<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>
<android.net.wifi.WifiManager: int getWifiApState()>
<com.android.internal.telephony.ITelephony: boolean disableDataConnectivity()>
<com.android.internal.telephony.ITelephony: boolean enableDataConnectivity()>
<com.android.internal.telephony.ITelephony$Stub: void call(java.lang.String)>
<com.android.internal.telephony.ITelephony$Stub: java.util.List getNeighboringCellInfo()>
<com.android.mms.ui.SlideViewInterface: void setVideo(java.lang.String,android.net.Uri)>
<com.android.mms.ui.SlideViewInterface: void setAudio(android.net.Uri,java.lang.String,java.util.Map)>
<com.google.common.io.Files: void move(java.io.File,java.io.File)>
<com.google.common.io.Resources: java.lang.String toString(java.net.URL,char)>
<android.provider.Settings$Secure: boolean putFloat(android.content.ContentResolver,java.lang.String,float)>
<android.provider.Settings$Secure: boolean putLong(android.content.ContentResolver,java.lang.String,long)>
<com.google.common.io.Files: java.lang.String readFirstLine(java.io.File,char)>
<android.net.ConnectivityManager: int getNetworkPreference()>
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<com.android.inputmethod.keyboard.PointerTracker: void onDownEvent(int,int,long,int)>
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean dispatchHoverEvent(android.view.MotionEvent,int)>
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: void simulateKeyPress(com.android.inputmethod.keyboard.Key)>
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean onTransitionKey(com.android.inputmethod.keyboard.Key,com.android.inputmethod.keyboard.Key,android.view.MotionEvent)>
<com.android.inputmethod.latin.ContactsBinaryDictionary: void loadDictionary()>
<com.android.inputmethod.accessibility.AccessibilityEntityProvider: boolean performActionForKey(com.android.inputmethod.keyboard.Key,int,android.os.Bundle)>
<com.android.inputmethod.latin.ExpandableBinaryDictionary: com.android.inputmethod.latin.ExpandableBinaryDictionary$DictionaryUpdateController access$500(com.android.inputmethod.latin.ExpandableBinaryDictionary)>
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy: boolean onHoverKey(com.android.inputmethod.keyboard.Key,android.view.MotionEvent)>
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary: void <init>(android.content.Context,java.util.Locale)>
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary: void <init>(android.content.Context,java.lang.String,boolean)>
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService: void startUsingContactsDictionaryLocked()>
<com.android.inputmethod.latin.UserBinaryDictionary: void loadDictionary()>
<com.android.inputmethod.keyboard.internal.KeyboardState: void onPressKey(int,boolean,int)>
<com.android.inputmethod.latin.ContactsBinaryDictionary: int getContactCount()>
<com.android.inputmethod.latin.UserBinaryDictionary: void <init>(android.content.Context,java.lang.String,boolean)>
<com.android.inputmethod.latin.ExpandableBinaryDictionary: boolean hasContentChanged()>
<com.android.inputmethod.latin.SubtypeSwitcher: void updateParametersOnStartInputView()>
<com.android.inputmethod.latin.ExpandableBinaryDictionary: void loadDictionaryAsync()>
<com.android.inputmethod.keyboard.KeyboardActionListener: void onCodeInput(int,int,int)>
<com.android.inputmethod.latin.UserBinaryDictionary: void <init>(android.content.Context,java.lang.String)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)>
<android.nfc.tech.NfcF: void connect()>
<android.nfc.tech.NfcF: void close()>
<android.nfc.tech.NfcF: byte[] transceive(byte[])>
<android.bluetooth.IBluetoothHeadset$Stub: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothA2dp$Stub: boolean connect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothA2dp$Stub: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean createIncomingConnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothA2dp$Stub: boolean suspendSink(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothA2dp$Stub: boolean resumeSink(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean connect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean connectHeadsetInternal(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: java.util.List getConnectedDevices()>
<android.bluetooth.IBluetoothHeadset$Stub: int getBatteryUsageHint(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothA2dp$Stub: int getPriority(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean isAudioConnected(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean disconnectHeadsetInternal(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothA2dp$Stub: int getConnectionState(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothA2dp$Stub: boolean setPriority(android.bluetooth.BluetoothDevice,int)>
<android.bluetooth.IBluetoothA2dp$Stub: boolean disconnect(android.bluetooth.BluetoothDevice)>
<android.bluetooth.IBluetoothHeadset$Stub: java.util.List getDevicesMatchingConnectionStates(int[])>
<com.android.camera.LocationManager: void recordLocation(boolean)>
<com.android.camera.LocationManager: void startReceivingLocationUpdates()>
<com.android.camera.ShutterButton: boolean performClick()>
<com.android.internal.telephony.ITelephony: void call(java.lang.String)>
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])>
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)>
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)>
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)>
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<com.android.internal.app.IBatteryStats$Stub: byte[] getStatistics()>
<com.android.internal.app.IBatteryStats$Stub: long getAwakeTimeBattery()>
<com.android.internal.app.IBatteryStats$Stub: void setBatteryState(int,int,int,int,int,int)>
<com.android.internal.app.IBatteryStats$Stub: void noteBluetoothOn()>
<com.android.internal.app.IBatteryStats$Stub: long getAwakeTimePlugged()>
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
<android.view.IWindowManager$Stub: void dismissKeyguard()>
<android.view.IWindowManager$Stub: void disableKeyguard(android.os.IBinder,java.lang.String)>
<android.app.INotificationManager$Stub: void enqueueNotificationWithTag(java.lang.String,java.lang.String,int,android.app.Notification,int[])>
<android.view.IWindowManager$Stub: void freezeRotation(int)>
<android.view.IWindowManager$Stub: void clearForcedDisplaySize()>
<com.android.internal.statusbar.IStatusBarService$Stub: void collapse()>
<android.app.INotificationManager$Stub: void enqueueNotification(java.lang.String,int,android.app.Notification,int[])>
<com.android.internal.statusbar.IStatusBarService$Stub: void expand()>
<android.view.IWindowManager$Stub: void reenableKeyguard(android.os.IBinder)>
<android.view.IWindowSession$Stub: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)>
<android.view.IWindowManager$Stub: void setForcedDisplaySize(int,int)>
<android.view.IWindowManager$Stub: void thawRotation()>
<android.view.IWindowManager$Stub: void setNewConfiguration(android.content.res.Configuration)>
<android.view.IWindowManager$Stub: void prepareAppTransition(int,boolean)>
<android.view.IWindowManager$Stub: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>
<android.telephony.TelphonyManager: java.lang.String getSimCountryIso()>
<android.telephony.gsm.SmsMessage: java.lang.String getMessageBody()>
<android.content.pm.PackageManager: java.lang.String getPackageInfo(java.lang.String,int)>
<dalvik.system.DexClassLoader: java.lang.Class loadClass(java.lang.String)>