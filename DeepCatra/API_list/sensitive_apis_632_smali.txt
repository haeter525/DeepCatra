//catradroid„ÄÅsourcesAndSinks of flowDroid and sourcesAndSink of taintDroid:
<android.telephony.TelephonyManager.getDeviceId()Ljava/lang/String;>
<android.telephony.TelephonyManager.getSubscriberId()Ljava/lang/String;>
<android.telephony.TelephonyManager.getSimSerialNumber()Ljava/lang/String;>
<android.telephony.TelephonyManager.getLine1Number()Ljava/lang/String;>
<android.telephony.SmsManager.sendTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<android.telephony.SmsManager.sendDataMessage(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<android.telephony.SmsManager.sendMultipartTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V>
<android.location.LocationManager.getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;>
<android.accounts.AccountManager.getAccounts()Landroid/accounts/Account[];>
<android.content.ContentResolver.delete(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String[];)I>
<org.apache.http.impl.client.DefaultHttpClient.execute(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;>
<org.apache.http.client.HttpClient.execute(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;>
<java.net.URLConnection.getInputStream()Ljava/io/InputStream;>
<android.media.MediaRecorder.setVideoSource(I)V>

//catradroid and sourcesAndSinks of flowDroid:
<java.net.URLConnection.connect()V>
<android.bluetooth.BluetoothAdapter.getAddress()Ljava/lang/String;>
<java.net.URL.openStream()Ljava/io/InputStream;>
<java.net.URL.getContent()Ljava/lang/Object;>

//catradroid and sourcesAndSink of taintDroid:
<android.telephony.gsm.SmsManager.sendTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V>

//sourcesAndSinks of flowDroid and sourcesAndSink of taintDroid:
<android.telephony.gsm.GsmCellLocation.getCid()I>
<android.telephony.gsm.GsmCellLocation.getLac()I>
<android.content.ContentResolver.query(Landroid/net/Uri;Ljava/lang/String[];Ljava/lang/String;Ljava/lang/String[];Ljava/lang/String;)Landroid/database/Cursor;>
<android.content.ContentResolver.query(Landroid/net/Uri;Ljava/lang/String[];Ljava/lang/String;Ljava/lang/String[];Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;>
<android.content.ContentResolver.insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;>
<android.content.ContentResolver.update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;Ljava/lang/String[];)I>
<android.media.MediaRecorder.start()V>
<java.net.URLConnection.getOutputStream()Ljava/io/OutputStream;>
<java.net.URL.set(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V>
<java.net.URL.set(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V>
<android.media.AudioRecord.read([SII)I>
<android.media.AudioRecord.read([BII)I>
<android.media.AudioRecord.read(Ljava/nio/ByteBuffer;I)I>
<android.media.MediaRecorder.setPreviewDisplay(Landroid/view/Surface;)V>

//sourcesAndSinks of flowDroid:
<java.net.Socket.connect(Ljava/net/SocketAddress;)V>
<com.google.auth.oauth2.DefaultCredentialsProvider.getDefaultCredentials(Lcom/google/api/client/http/HttpTransport;)Lcom/google/auth/oauth2/GoogleCredentials;>
<com.google.auth.oauth2.UserAuthorizer.getCredentialsFromCode(Ljava/lang/String;Ljava/net/URI;)Lcom/google/auth/oauth2/UserCredentials;>
<com.google.auth.oauth2.DefaultCredentialsProvider.getDefaultCredentialsUnsynchronized(Lcom/google/api/client/http/HttpTransport;)Lcom/google/auth/oauth2/GoogleCredentials;>
<com.google.auth.oauth2.DefaultCredentialsProvider.getWellKnownCredentialsFile(Lcom/google/auth/oauth2/DefaultCredentialsProvider: java/io/File getWellKnownCredentialsFile;)Ljava/io/File;>
<android.net.wifi.WifiInfo.getMacAddress()Ljava/lang/String;>
<android.net.wifi.WifiInfo.getSSID()Ljava/lang/String;>
<java.io.File.delete()Z>
<android.provider.Browser.getAllBookmarks()Landroid/database/Cursor;>
<android.provider.Browser.getAllVisitedUrls()Landroid/database/Cursor;>
<android.database.sqlite.SQLiteDatabase.query(Landroid/net/Uri;Ljava/lang/String[];Ljava/lang/String;Ljava/lang/String[];Ljava/lang/String;)Landroid/database/Cursor;>
<android.database.sqlite.SQLiteDatabase.query(Landroid/net/Uri;Ljava/lang/String[];Ljava/lang/String;Ljava/lang/String[];Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;>
<org.springframework.security.config.http.CsrfBeanDefinitionParser.getCsrfLogoutHandler(Lorg/springframework/security/config/http/CsrfBeanDefinitionParser: org/springframework/beans/factory/config/BeanDefinition getCsrfLogoutHandler;)Lorg/springframework/beans/factory/config/BeanDefinition;>
<org.springframework.security.config.http.FormLoginBeanDefinitionParser.getLoginPage(Lorg/springframework/security/config/http/FormLoginBeanDefinitionParser: java/lang/String getLoginPage;)Ljava/lang/String;>
<org.springframework.security.config.http.FormLoginBeanDefinitionParser.getLoginProcessingUrl(Lorg/springframework/security/config/http/FormLoginBeanDefinitionParser: java/lang/String getLoginProcessingUrl;)Ljava/lang/String;>
<org.springframework.security.config.http.LogoutBeanDefinitionParser.getLogoutRequestMatcher(Ljava/lang/String;)Lorg/springframework/beans/factory/config/BeanDefinition;>
<android.content.Context.registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;>
<android.content.Context.registerReceiver(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;>
<android.app.Activity.sendOrderedBroadcast(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V>
<android.app.Activity.sendOrderedBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V>
<android.app.Activity.sendStickyOrderedBroadcast(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V>
<android.app.Activity.sendStickyOrderedBroadcastAsUser(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V>
<java.net.URL.getContent(Ljava/lang/Class[];)Ljava/lang/Object;>
<org.apache.xmlrpc.webserver.XmlRpcServletServer.getConfig(Ljavax/servlet/http/HttpServletRequest;)Lorg/apache/xmlrpc/common/XmlRpcHttpRequestConfigImpl;>
<android.os.Bundle.putBinder(Ljava/lang/String;Landroid/os/IBinder;)V>
<android.os.Bundle.putSerializable(Ljava/lang/String;Ljava/io/Serializable;)V>
<android.content.Context.startActivities(Landroid/content/Intent[];Landroid/os/Bundle;)V>
<android.app.Activity.startActivities(Landroid/content/Intent[];Landroid/os/Bundle;)V>
<android.app.Activity.startActivityForResult(Landroid/content/Intent;ILandroid/os/Bundle;)V>
<android.app.Activity.startActivityFromChild(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V>
<android.app.Activity.startActivityFromFragment(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V>
<android.app.Activity.startActivityIfNeeded(Landroid/content/Intent;ILandroid/os/Bundle;)V>
<android.content.pm.PackageManager.getInstalledApplications(I)Ljava/util/List;>
<android.content.pm.PackageManager.getInstalledPackages(I)Ljava/util/List;>
<android.content.pm.PackageManager.queryIntentActivities(Landroid/content/Intent;I)Ljava/util/List;>
<android.content.pm.PackageManager.queryIntentServices(Landroid/content/Intent;I)Ljava/util/List;>
<android.content.pm.PackageManager.queryBroadcastReceivers(Landroid/content/Intent;I)Ljava/util/List;>
<android.content.pm.PackageManager.queryContentProviders(Ljava/lang/String;II)Ljava/util/List;>
<org.apache.xmlrpc.webserver.ConnectionServer.writeResponse(Lorg/apache/xmlrpc/common/XmlRpcStreamRequestConfig;Ljava/io/OutputStream;Ljava/lang/Object;)V>

//catradroid:
<android.content.BroadcastReceiver.abortBroadcast()V>
<org.apache.http.impl.client.AbstractHttpClient.execute(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;>
<android.net.http.AndroidHttpClient.execute(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;>
<sun.net.www.protocol.http.HttpURLConnection.connect()V>
<java.net.URL.openConnection()Ljava/net/URLConnection;>
<java.net.URL.openConnection(Ljava/net/Proxy;)Ljava/net/URLConnection;>
<java.lang.reflect.Method.invoke(Ljava/lang/Object;Ljava/lang/Object[];)Ljava/lang/Object;>
<java.lang.ClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;>
<java.lang.ClassLoader.loadClass(Ljava/lang/String;Z)Ljava/lang/Class;>
<android.os.Vibrator.vibrate([JI)V>
<android.net.ConnectivityManager.getNetworkInfo(I)Landroid/net/NetworkInfo;>
<android.support.v4.net.ConnectivityManagerCompat$ConnectivityManagerCompatImpl.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z>
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge.performAction(IILandroid/os/Bundle;)Z>
<android.hardware.Camera.open()Landroid/hardware/Camera;>
<android.location.LocationManager.requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;Landroid/os/Looper;)V>
<android.location.LocationManager.requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;)V>
<android.os.PowerManager$WakeLock.acquire(J)V>
<android.support.v4.net.ConnectivityManagerCompatGingerbread.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z>
<android.media.RingtoneManager.getRingtone(Landroid/content/Context;Landroid/net/Uri;)Landroid/media/Ringtone;>
<android.support.v4.view.accessibility.AccessibilityNodeProviderCompat.performAction(IILandroid/os/Bundle;)Z>
<android.support.v4.net.ConnectivityManagerCompatHoneycombMR2.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z>
<android.media.Ringtone.play()V>
<android.location.LocationManager.addProximityAlert(DDFJLandroid/app/PendingIntent;)V>
<android.net.ConnectivityManager.isActiveNetworkMetered()Z>
<android.bluetooth.BluetoothAdapter.isEnabled()Z>
<android.app.NotificationManager.notify(ILandroid/app/Notification;)V>
<android.bluetooth.BluetoothAdapter.startDiscovery()Z>
<android.app.NotificationManager.notify(Ljava/lang/String;ILandroid/app/Notification;)V>
<android.support.v4.net.ConnectivityManagerCompatJellyBean.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z>
<android.bluetooth.BluetoothAdapter.cancelDiscovery()Z>
<java.net.HttpURLConnection.connect()V>
<android.accounts.AccountManager.invalidateAuthToken(Ljava/lang/String;Ljava/lang/String;)V>
<android.webkit.WebView.<init>(Landroid/content/Context;)V>
<android.webkit.WebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;)V>
<android.net.ConnectivityManager.getActiveNetworkInfo()Landroid/net/NetworkInfo;>
<android.location.LocationManager.isProviderEnabled(Ljava/lang/String;)Z>
<android.location.LocationManager.getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;>
<android.bluetooth.BluetoothAdapter.isDiscovering()Z>
<android.location.LocationManager.getProviders(Z)Ljava/util/List;>
<android.os.PowerManager$WakeLock.acquire()V>
<android.location.LocationManager.requestSingleUpdate(Landroid/location/Criteria;Landroid/app/PendingIntent;)V>
<android.os.PowerManager$WakeLock.release()V>
<android.webkit.WebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;I)V>
<android.webkit.WebView.<init>(Landroid/content/Context;Landroid/util/AttributeSet;IZ)V>
<android.net.ConnectivityManager.getAllNetworkInfo()Landroid/net/NetworkInfo[];>
<android.widget.VideoView.pause()V>
<android.net.wifi.WifiManager.getDhcpInfo()Landroid/net/DhcpInfo;>
<android.net.wifi.WifiManager.getConnectionInfo()Landroid/net/wifi/WifiInfo;>
<android.app.KeyguardManager$KeyguardLock.disableKeyguard()V>
<android.widget.VideoView.start()V>
<android.app.KeyguardManager$KeyguardLock.reenableKeyguard()V>
<android.media.AudioRecord.<init>(IIIII)V>
<android.media.AudioManager.setSpeakerphoneOn(Z)V>
<android.telephony.TelephonyManager.listen(Landroid/telephony/PhoneStateListener;I)V>
<android.os.Vibrator.cancel()V>
<android.os.Vibrator.vibrate(J)V>
<android.net.wifi.WifiManager.isWifiEnabled()Z>
<android.media.MediaPlayer.stop()V>
<android.accounts.AccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;>
<android.media.MediaPlayer.start()V>
<android.media.MediaPlayer.reset()V>
<android.media.MediaPlayer.pause()V>
<android.location.LocationManager.getProviders(Landroid/location/Criteria;Z)Ljava/util/List;>
<android.media.MediaPlayer.release()V>
<android.telephony.TelephonyManager.getDeviceSoftwareVersion()Ljava/lang/String;>
<android.widget.VideoView.setVideoURI(Landroid/net/Uri;)V>
<android.location.LocationManager.requestLocationUpdates(Ljava/lang/String;JFLandroid/app/PendingIntent;)V>
<android.widget.VideoView.resume()V>
<android.accounts.AccountManager.addOnAccountsUpdatedListener(Landroid/accounts/OnAccountsUpdateListener;Landroid/os/Handler;Z)V>
<android.accounts.AccountManager.setUserData(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V>
<android.accounts.AccountManager.getUserData(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;>
<android.accounts.AccountManager.addAccount(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String[];Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;>
<android.accounts.AccountManager.peekAuthToken(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;>
<android.content.ContentResolver.setSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;Z)V>
<android.media.MediaRecorder.setAudioSource(I)V>
<android.content.ContentResolver.setMasterSyncAutomatically(Z)V>
<android.accounts.AccountManager.setAuthToken(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V>
<android.accounts.AccountManager.getAccountsByType(Ljava/lang/String;)Landroid/accounts/Account[];>
<android.accounts.AccountManager.addAccountExplicitly(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Z>
<android.accounts.AccountManager.getPassword(Landroid/accounts/Account;)Ljava/lang/String;>
<android.accounts.AccountManager.removeAccount(Landroid/accounts/Account;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;>
<android.provider.Settings$System.putInt(Landroid/content/ContentResolver;Ljava/lang/String;I)Z>
<android.telephony.TelephonyManager.getCellLocation()Landroid/telephony/CellLocation;>
<android.location.LocationManager.requestSingleUpdate(Ljava/lang/String;Landroid/location/LocationListener;Landroid/os/Looper;)V>
<android.net.wifi.WifiManager.startScan()Z>
<android.net.wifi.WifiManager$WifiLock.acquire()V>
<android.net.wifi.WifiManager.getScanResults()Ljava/util/List;>
<android.telephony.TelephonyManager.getNeighboringCellInfo()Ljava/util/List;>
<android.net.wifi.WifiManager$WifiLock.release()V>
<com.android.inputmethod.latin.ContactsDictionary.loadDictionary()V>
<com.android.inputmethod.latin.LatinIME.launchSettings()V>
<com.android.inputmethod.latin.ExpandableDictionary.isValidWord(Ljava/lang/CharSequence;)Z>
<com.android.inputmethod.latin.LatinIME.handleClose()V>
<com.android.inputmethod.latin.ContactsDictionary.<init>(Landroid/content/Context;I)V>
<com.android.inputmethod.latin.UserDictionary.loadDictionaryAsync()V>
<com.android.inputmethod.latin.ExpandableDictionary.reloadDictionaryIfRequired()Z>
<com.android.inputmethod.latin.LatinIME.loadSettings()V>
<com.android.inputmethod.latin.UserDictionary.isValidWord(Ljava/lang/CharSequence;)Z>
<android.speech.SpeechRecognizer.cancel()V>
<com.android.inputmethod.latin.LatinIME.switchToKeyboardView()V>
<com.android.inputmethod.latin.ExpandableDictionary.<init>(Landroid/content/Context;I)V>
<com.android.inputmethod.latin.Dictionary.isValidWord(Ljava/lang/CharSequence;)Z>
<com.android.inputmethod.latin.LatinIME.addWordToDictionary(Ljava/lang/String;)Z>
<com.android.inputmethod.latin.LatinIME.updateSuggestions()V>
<com.android.inputmethod.latin.UserDictionary.loadDictionary()V>
<com.android.inputmethod.latin.UserDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V>
<com.android.inputmethod.latin.ExpandableDictionary.startDictionaryLoadingTaskLocked()V>
<com.android.inputmethod.latin.ExpandableDictionary.loadDictionaryAsync()V>
<android.app.WallpaperManager.setStream(Ljava/io/InputStream;)V>
<android.accounts.AccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;>
<android.accounts.AccountManager.blockingGetAuthToken(Landroid/accounts/Account;Ljava/lang/String;Z)Ljava/lang/String;>
<android.media.RingtoneManager.setActualDefaultRingtoneUri(Landroid/content/Context;ILandroid/net/Uri;)V>
<android.media.MediaPlayer.setWakeMode(Landroid/content/Context;I)V>
<android.content.ContentResolver.addPeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V>
<android.content.ContentResolver.getSyncAutomatically(Landroid/accounts/Account;Ljava/lang/String;)Z>
<android.content.ContentResolver.setIsSyncable(Landroid/accounts/Account;Ljava/lang/String;I)V>
<android.content.ContentResolver.removePeriodicSync(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V>
<android.widget.VideoView.suspend()V>
<android.provider.Settings$System.getUriFor(Ljava/lang/String;)Landroid/net/Uri;>
<java.net.ServerSocket.<init>(I)V>
<java.net.ServerSocket.bind(Ljava/net/SocketAddress;)V>
<android.location.LocationManager.addGpsStatusListener(Landroid/location/GpsStatus$Listener;)Z>
<android.accounts.AccountManager.getAccountsByTypeAndFeatures(Ljava/lang/String;Ljava/lang/String[];Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;>
<android.location.LocationManager.requestLocationUpdates(JFLandroid/location/Criteria;Landroid/app/PendingIntent;)V>
<android.net.wifi.WifiManager.setWifiEnabled(Z)Z>
<android.content.ContentResolver.getMasterSyncAutomatically()Z>
<android.bluetooth.BluetoothAdapter.disable()Z>
<android.bluetooth.BluetoothAdapter.enable()Z>
<android.media.AudioManager.isWiredHeadsetOn()Z>
<android.telephony.TelephonyManager.getAllCellInfo()Ljava/util/List;>
<android.provider.Settings$System.putString(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z>
<android.net.wifi.WifiManager.getWifiState()I>
<android.location.LocationManager.addNmeaListener(Landroid/location/GpsStatus$NmeaListener;)Z>
<android.provider.Settings$Secure.getUriFor(Ljava/lang/String;)Landroid/net/Uri;>
<android.net.wifi.WifiManager.getConfiguredNetworks()Ljava/util/List;>
<android.media.AudioManager.startBluetoothSco()V>
<android.media.AudioManager.setBluetoothScoOn(Z)V>
<android.media.AudioManager.stopBluetoothSco()V>
<android.location.LocationManager.sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z>
<android.nfc.NfcAdapter.setBeamPushUrisCallback(Landroid/nfc/NfcAdapter$CreateBeamUrisCallback;Landroid/app/Activity;)V>
<android.nfc.NfcAdapter.setNdefPushMessageCallback(Landroid/nfc/NfcAdapter$CreateNdefMessageCallback;Landroid/app/Activity;Landroid/app/Activity[];)V>
<android.nfc.NfcAdapter.setOnNdefPushCompleteCallback(Landroid/nfc/NfcAdapter$OnNdefPushCompleteCallback;Landroid/app/Activity;Landroid/app/Activity[];)V>
<android.net.wifi.WifiManager.addNetwork(Landroid/net/wifi/WifiConfiguration;)I>
<android.net.wifi.WifiManager.disableNetwork(I)Z>
<android.net.wifi.WifiManager.enableNetwork(IZ)Z>
<android.net.wifi.WifiManager.saveConfiguration()Z>
<android.net.wifi.WifiManager.reassociate()Z>
<android.net.wifi.WifiManager.updateNetwork(Landroid/net/wifi/WifiConfiguration;)I>
<android.net.wifi.WifiManager.removeNetwork(I)Z>
<com.google.common.io.Resources.readLines(Ljava/net/URL;CLcom/google/common/io/LineProcessor;)Ljava/lang/Object;>
<android.bluetooth.BluetoothDevice.getName()Ljava/lang/String;>
<android.bluetooth.BluetoothHeadset.getConnectedDevices()Ljava/util/List;>
<android.media.AudioManager.setMode(I)V>
<android.bluetooth.BluetoothDevice.getBluetoothClass()Landroid/bluetooth/BluetoothClass;>
<android.bluetooth.BluetoothAdapter.getState()I>
<android.bluetooth.BluetoothHeadset.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.BluetoothHeadset.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<android.accounts.AccountManager.setPassword(Landroid/accounts/Account;Ljava/lang/String;)V>
<android.nfc.NfcAdapter.enableForegroundDispatch(Landroid/app/Activity;Landroid/app/PendingIntent;Landroid/content/IntentFilter[];Ljava/lang/String[][];)V>
<android.nfc.tech.Ndef.connect()V>
<android.location.LocationManager.getProvider(Ljava/lang/String;)Landroid/location/LocationProvider;>
<android.nfc.tech.Ndef.close()V>
<android.nfc.NfcAdapter.disableForegroundDispatch(Landroid/app/Activity;)V>
<com.google.common.io.MultiReader.advance()V>
<com.google.common.io.Files.copy(Ljava/io/File;Ljava/io/File;)V>
<com.google.common.io.MultiInputStream.read()I>
<com.google.common.io.Files.readLines(Ljava/io/File;CLcom/google/common/io/LineProcessor;)Ljava/lang/Object;>
<com.google.common.io.MultiInputStream.<init>(Ljava/util/Iterator;)V>
<com.google.common.io.InputSupplier.getInput()Ljava/lang/Object;>
<com.google.common.io.MultiReader.read([CII)I>
<com.google.common.io.CharStreams.readLines(Lcom/google/common/io/InputSupplier;Lcom/google/common/io/LineProcessor;)Ljava/lang/Object;>
<com.google.common.io.MultiInputStream.advance()V>
<com.google.common.io.ByteStreams.readBytes(Lcom/google/common/io/InputSupplier;Lcom/google/common/io/ByteProcessor;)Ljava/lang/Object;>
<com.google.common.io.MultiInputStream.read([BII)I>
<com.google.common.io.MultiReader.<init>(Ljava/util/Iterator;)V>
<android.net.wifi.WifiManager.disconnect()Z>
<android.net.wifi.WifiManager.reconnect()Z>
<android.location.LocationManager.requestSingleUpdate(Landroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V>
<android.app.WallpaperManager.clear()V>
<android.provider.Settings$Secure.putString(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Z>
<android.app.WallpaperManager.setResource(I)V>
<com.google.common.io.CharStreams.copy(Lcom/google/common/io/InputSupplier;Ljava/lang/Appendable;)J>
<com.google.common.io.CharStreams.readFirstLine(Lcom/google/common/io/InputSupplier;)Ljava/lang/String;>
<com.google.common.io.ByteStreams.copy(Lcom/google/common/io/InputSupplier;Ljava/io/OutputStream;)J>
<com.google.common.io.ByteStreams.getChecksum(Lcom/google/common/io/InputSupplier;Ljava/util/zip/Checksum;)J>
<com.google.common.io.ByteStreams.toByteArray(Lcom/google/common/io/InputSupplier;)[B>
<com.google.common.io.ByteStreams.getDigest(Lcom/google/common/io/InputSupplier;Ljava/security/MessageDigest;)[B>
<com.google.common.io.CharStreams.copy(Lcom/google/common/io/InputSupplier;Lcom/google/common/io/OutputSupplier;)J>
<com.google.common.io.Files.toByteArray(Ljava/io/File;)[B>
<com.google.common.io.CharStreams.readLines(Lcom/google/common/io/InputSupplier;)Ljava/util/List;>
<com.google.common.io.CharStreams.toStringBuilder(Lcom/google/common/io/InputSupplier;)Ljava/lang/StringBuilder;>
<android.content.ContentResolver.getCurrentSync()Landroid/content/SyncInfo;>
<android.app.DownloadManager.getUriForDownloadedFile(J)Landroid/net/Uri;>
<com.google.common.io.CharStreams.toString(Lcom/google/common/io/InputSupplier;)Ljava/lang/String;>
<android.content.ContentResolver.getCurrentSyncs()Ljava/util/List;>
<android.bluetooth.BluetoothDevice.getBondState()I>
<com.google.common.io.ByteStreams.equal(Lcom/google/common/io/InputSupplier;Lcom/google/common/io/InputSupplier;)Z>
<android.bluetooth.BluetoothAdapter.getBondedDevices()Ljava/util/Set;>
<com.google.common.io.ByteStreams.copy(Lcom/google/common/io/InputSupplier;Lcom/google/common/io/OutputSupplier;)J>
<com.google.common.io.Files.copy(Lcom/google/common/io/InputSupplier;Ljava/io/File;)V>
<com.google.common.io.Resources$1.getInput()Ljava/io/InputStream;>
<android.telephony.TelephonyManager.getVoiceMailNumber()Ljava/lang/String;>
<com.google.common.io.CharStreams$4.getInput()Ljava/io/Reader;>
<com.google.common.io.ByteStreams$5.getInput()Ljava/io/InputStream;>
<com.google.common.io.CharStreams$2.getInput()Ljava/io/InputStreamReader;>
<com.google.common.io.ByteStreams$4.getInput()Ljava/io/InputStream;>
<android.content.ContentResolver.getIsSyncable(Landroid/accounts/Account;Ljava/lang/String;)I>
<android.media.AudioManager.isBluetoothA2dpOn()Z>
<android.net.wifi.WifiManager$MulticastLock.release()V>
<android.net.wifi.WifiManager$MulticastLock.acquire()V>
<android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;>
<android.bluetooth.BluetoothSocket.connect()V>
<android.media.Ringtone.stop()V>
<android.accounts.AccountManager.updateCredentials(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;>
<android.support.v4.net.ConnectivityManagerCompat.isActiveNetworkMetered(Landroid/net/ConnectivityManager;)Z>
<com.android.internal.telephony.ITelephony.endCall()Z>
<android.media.AudioManager.setMicrophoneMute(Z)V>
<android.bluetooth.BluetoothAdapter.getName()Ljava/lang/String;>
<android.media.RingtoneManager.getRingtone(I)Landroid/media/Ringtone;>
<android.media.AudioManager.setParameters(Ljava/lang/String;)V>
<android.provider.CalendarContract$Reminders.query(Landroid/content/ContentResolver;JLjava/lang/String[];)Landroid/database/Cursor;>
<android.provider.CalendarContract$Attendees.query(Landroid/content/ContentResolver;JLjava/lang/String[];)Landroid/database/Cursor;>
<android.content.ContentResolver.getPeriodicSyncs(Landroid/accounts/Account;Ljava/lang/String;)Ljava/util/List;>
<android.provider.Settings$Secure.putInt(Landroid/content/ContentResolver;Ljava/lang/String;I)Z>
<android.media.effect.EffectContext.release()V>
<android.accounts.AccountManager.getAuthToken(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;>
<android.net.ConnectivityManager.requestRouteToHost(II)Z>
<android.accounts.AccountManager.getAuthTokenByFeatures(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String[];Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/Bundle;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;>
<android.bluetooth.BluetoothAdapter.getProfileConnectionState(I)I>
<android.location.LocationManager.requestLocationUpdates(JFLandroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V>
<android.accounts.AccountManager.editProperties(Ljava/lang/String;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;>
<android.provider.Settings$System.putLong(Landroid/content/ContentResolver;Ljava/lang/String;J)Z>
<android.nfc.NfcAdapter.setNdefPushMessage(Landroid/nfc/NdefMessage;Landroid/app/Activity;Landroid/app/Activity[];)V>
<android.location.LocationManager.setTestProviderStatus(Ljava/lang/String;ILandroid/os/Bundle;J)V>
<android.location.LocationManager.removeTestProvider(Ljava/lang/String;)V>
<android.location.LocationManager.setTestProviderEnabled(Ljava/lang/String;Z)V>
<android.location.LocationManager.setTestProviderLocation(Ljava/lang/String;Landroid/location/Location;)V>
<android.location.LocationManager.addTestProvider(Ljava/lang/String;ZZZZZZZII)V>
<android.net.ConnectivityManager.setNetworkPreference(I)V>
<android.net.ConnectivityManager.stopUsingNetworkFeature(ILjava/lang/String;)I>
<android.net.ConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;)I>
<android.media.Ringtone.setStreamType(I)V>
<android.telephony.TelephonyManager.getVoiceMailAlphaTag()Ljava/lang/String;>
<android.webkit.WebViewFragment.onCreateView(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;>
<android.location.LocationManager.requestSingleUpdate(Ljava/lang/String;Landroid/app/PendingIntent;)V>
<android.media.RingtoneManager.stopPreviousRingtone()V>
<com.google.common.io.Files.toString(Ljava/io/File;C)Ljava/lang/String;>
<android.location.LocationManager.clearTestProviderEnabled(Ljava/lang/String;)V>
<android.location.LocationManager.clearTestProviderStatus(Ljava/lang/String;)V>
<android.location.LocationManager.clearTestProviderLocation(Ljava/lang/String;)V>
<android.bluetooth.BluetoothAdapter.getScanMode()I>
<android.accounts.AccountManager.hasFeatures(Landroid/accounts/Account;Ljava/lang/String[];Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;>
<android.os.storage.IMountService$Stub.getStorageUsers(Ljava/lang/String;)[I>
<android.os.storage.IMountService.setUsbMassStorageEnabled(Z)V>
<android.os.storage.IMountService$Stub.setUsbMassStorageEnabled(Z)V>
<android.os.storage.IMountService$Stub.unmountVolume(Ljava/lang/String;ZZ)V>
<android.os.IPowerManager$Stub.setStayOnSetting(I)V>
<android.os.IVibratorService$Stub.cancelVibrate(Landroid/os/IBinder;)V>
<android.os.storage.IMountService$Stub.finishMediaUpdate()V>
<android.os.IPowerManager$Stub.releaseWakeLock(Landroid/os/IBinder;I)V>
<android.os.storage.IMountService$Stub.formatVolume(Ljava/lang/String;)I>
<android.os.PowerManager$WakeLock.release(I)V>
<android.os.storage.IMountService$Stub.mountVolume(Ljava/lang/String;)I>
<android.os.PowerManager$WakeLock.acquireLocked()V>
<android.os.storage.IMountService$Stub.shutdown(Landroid/os/storage/IMountShutdownObserver;)V>
<android.os.IPowerManager.releaseWakeLock(Landroid/os/IBinder;I)V>
<android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;>
<android.provider.CalendarContract$Instances.query(Landroid/content/ContentResolver;Ljava/lang/String[];JJ)Landroid/database/Cursor;>
<android.provider.Browser.clearHistory(Landroid/content/ContentResolver;)V>
<android.accounts.AccountManager.confirmCredentials(Landroid/accounts/Account;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;>
<android.net.IConnectivityManager.requestRouteToHostAddress(I[B)Z>
<com.android.mms.util.AddressUtils.getFrom(Landroid/content/Context;Landroid/net/Uri;)Ljava/lang/String;>
<com.android.mms.util.Recycler$MmsRecycler.deleteOldMessagesInSameThreadAsMessage(Landroid/content/Context;Landroid/net/Uri;)V>
<com.android.mms.data.Conversation.getUri()Landroid/net/Uri;>
<com.android.mms.util.DraftCache.rebuildCache()V>
<com.android.mms.transaction.NotificationTransaction.sendPdu([B)[B>
<com.android.mms.data.Contact$ContactsCache.getContactInfoForEmailAddress(Ljava/lang/String;)Lcom/android/mms/data/Contact;>
<com.android.mms.transaction.NotificationTransaction.sendNotifyRespInd(I)V>
<android.net.IConnectivityManager.startUsingNetworkFeature(ILjava/lang/String;Landroid/os/IBinder;)I>
<com.android.mms.transaction.NotificationTransaction.notifyObservers()V>
<android.net.ConnectivityManager.requestRouteToHostAddress(ILjava/net/InetAddress;)Z>
<com.android.mms.data.Conversation.blockingMarkAllSmsMessagesAsSeen(Landroid/content/Context;)V>
<com.android.mms.transaction.Transaction.process()V>
<com.android.mms.data.Conversation.asyncDeleteObsoleteThreads(Landroid/content/AsyncQueryHandler;I)V>
<android.provider.ContactsContract$Contacts.getLookupUri(JLjava/lang/String;)Landroid/net/Uri;>
<com.android.mms.transaction.NotificationTransaction.<init>(Landroid/content/Context;ILcom/android/mms/transaction/TransactionSettings;Ljava/lang/String;)V>
<com.android.mms.transaction.NotificationTransaction.getPdu(Ljava/lang/String;)[B>
<com.android.mms.transaction.SendTransaction.sendPdu(J[B)[B>
<com.android.mms.transaction.ReadRecTransaction.sendPdu([B)[B>
<com.android.mms.transaction.Observer.update(Lcom/android/mms/transaction/Observable;)V>
<com.android.mms.data.Conversation.loadFromThreadId(JZ)Z>
<com.android.mms.data.Conversation.blockingMarkAllMmsMessagesAsSeen(Landroid/content/Context;)V>
<android.net.IConnectivityManager.getActiveNetworkInfo()Landroid/net/NetworkInfo;>
<com.android.mms.data.Contact.getUri()Landroid/net/Uri;>
<android.net.IConnectivityManager.stopUsingNetworkFeature(ILjava/lang/String;)I>
<com.android.mms.util.DraftCache.access$000(Lcom/android/mms/util/DraftCache;)V>
<com.android.mms.util.DownloadManager.getMessage(Landroid/net/Uri;)Ljava/lang/String;>
<android.net.IConnectivityManager.getNetworkInfo(I)Landroid/net/NetworkInfo;>
<com.android.mms.transaction.RetryScheduler.isConnected()Z>
<com.android.mms.transaction.RetryScheduler.scheduleRetry(Landroid/net/Uri;)V>
<com.android.mms.transaction.RetryScheduler.getRetrieveStatus(J)I>
<com.android.mms.transaction.Transaction.ensureRouteToHost(Ljava/lang/String;Lcom/android/mms/transaction/TransactionSettings;)V>
<com.android.mms.transaction.RetrieveTransaction.notifyObservers()V>
<com.android.mms.transaction.ReadRecTransaction.notifyObservers()V>
<android.provider.ContactsContract$Contacts.markAsContacted(Landroid/content/ContentResolver;J)V>
<com.android.mms.transaction.RetrieveTransaction.getPdu(Ljava/lang/String;)[B>
<com.android.mms.transaction.RetryScheduler.getResponseStatus(J)I>
<com.android.mms.util.DownloadManager.markState(Landroid/net/Uri;I)V>
<com.android.mms.transaction.RetryScheduler.setRetryAlarm(Landroid/content/Context;)V>
<android.net.IConnectivityManager.getAllNetworkInfo()Landroid/net/NetworkInfo[];>
<com.android.mms.transaction.NotificationTransaction.sendPdu([BLjava/lang/String;)[B>
<com.android.mms.transaction.SendTransaction.notifyObservers()V>
<com.android.mms.transaction.HttpUtils.httpConnection(Landroid/content/Context;JLjava/lang/String;[BIZLjava/lang/String;I)[B>
<com.android.mms.transaction.RetrieveTransaction.sendPdu([BLjava/lang/String;)[B>
<com.android.mms.transaction.Transaction.sendPdu(J[BLjava/lang/String;)[B>
<com.android.mms.transaction.RetrieveTransaction.sendPdu([B)[B>
<android.net.IConnectivityManager.isActiveNetworkMetered()Z>
<android.nfc.tech.Ndef.writeNdefMessage(Landroid/nfc/NdefMessage;)V>
<android.media.AsyncPlayer.play(Landroid/content/Context;Landroid/net/Uri;ZI)V>
<android.provider.Telephony$Threads.getOrCreateThreadId(Landroid/content/Context;Ljava/util/Set;)J>
<android.provider.Telephony$Sms$Sent.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;)Landroid/net/Uri;>
<android.provider.Telephony$Threads.getOrCreateThreadId(Landroid/content/Context;Ljava/lang/String;)J>
<android.provider.Telephony$Sms$Inbox.addMessage(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/Long;Z)Landroid/net/Uri;>
<android.provider.Contacts$People.createPersonInMyContactsGroup(Landroid/content/ContentResolver;Landroid/content/ContentValues;)Landroid/net/Uri;>
<android.net.wifi.p2p.WifiP2pManager.initialize(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/p2p/WifiP2pManager$ChannelListener;)Landroid/net/wifi/p2p/WifiP2pManager$Channel;>
<android.provider.Settings$Secure.setLocationProviderEnabled(Landroid/content/ContentResolver;Ljava/lang/String;Z)V>
<android.content.Context.sendStickyOrderedBroadcast(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V>
<com.android.gallery3d.app.Gallery.initializeByIntent()V>
<com.android.gallery3d.app.AlbumPage.onLongTap(I)V>
<com.android.gallery3d.app.PhotoDataAdapter.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;>
<com.android.gallery3d.app.ActivityState.resume()V>
<com.android.gallery3d.app.ActivityState.onStateResult(IILandroid/content/Intent;)V>
<com.android.gallery3d.app.StateManager.onBackPressed()V>
<com.android.gallery3d.app.PhotoDataAdapter.updateCurrentIndex(I)V>
<com.android.gallery3d.app.AbstractGalleryActivity.onPause()V>
<com.android.gallery3d.app.Gallery.startViewAction(Landroid/content/Intent;)V>
<com.android.gallery3d.app.ActivityState.onCreate(Landroid/os/Bundle;Landroid/os/Bundle;)V>
<com.android.gallery3d.app.AlbumDataLoader.resume()V>
<com.android.gallery3d.app.AlbumSetPage.onSingleTapUp(I)V>
<com.android.gallery3d.app.AlbumPage.pickPhoto(I)V>
<com.android.gallery3d.app.AbstractGalleryActivity.onResume()V>
<com.android.gallery3d.app.StateManager.switchState(Lcom/android/gallery3d/app/ActivityState;Ljava/lang/Class;Landroid/os/Bundle;)V>
<com.android.gallery3d.app.AlbumDataLoader.executeAndWait(Ljava/util/concurrent/Callable;)Ljava/lang/Object;>
<com.android.gallery3d.app.AlbumPage.onSingleTapUp(I)V>
<com.android.gallery3d.app.PhotoPage$Model.resume()V>
<com.android.gallery3d.app.PhotoPage.onCommitDeleteImage()V>
<com.android.gallery3d.app.AlbumSetPage.pickAlbum(I)V>
<com.android.gallery3d.app.PhotoPage.setCurrentPhotoByIntent(Landroid/content/Intent;)V>
<com.android.gallery3d.app.SlideshowPage.showPendingBitmap()V>
<com.android.gallery3d.app.StateManager.restoreFromState(Landroid/os/Bundle;)V>
<com.android.gallery3d.app.AlbumSetPage.onLongTap(I)V>
<com.android.gallery3d.app.SlideshowPage.initializeViews()V>
<com.android.gallery3d.app.AlbumSetDataLoader.resume()V>
<com.android.gallery3d.app.StateManager.startStateForResult(Ljava/lang/Class;ILandroid/os/Bundle;)V>
<com.android.gallery3d.app.AlbumPage.clearLoadingBit(I)V>
<com.android.gallery3d.app.ActivityState.onResume()V>
<com.android.gallery3d.app.AlbumSetPage.clearLoadingBit(I)V>
<com.android.gallery3d.app.ActivityState.onBackPressed()V>
<com.android.gallery3d.app.StateManager.pause()V>
<com.android.gallery3d.app.AlbumPage.onBackPressed()V>
<com.android.gallery3d.app.SlideshowPage.onBackPressed()V>
<com.android.gallery3d.app.StateManager.resume()V>
<com.android.gallery3d.app.ActivityState.onPause()V>
<com.android.gallery3d.app.PhotoDataAdapter$UpdateContent.call()Ljava/lang/Void;>
<com.android.gallery3d.app.PhotoPage.onBackPressed()V>
<com.android.gallery3d.app.StateManager.notifyActivityResult(IILandroid/content/Intent;)V>
<com.android.gallery3d.app.AlbumPage.onUpPressed()V>
<com.android.gallery3d.app.StateManager.finishState(Lcom/android/gallery3d/app/ActivityState;)V>
<com.android.gallery3d.app.StateManager.itemSelected(Landroid/view/MenuItem;)Z>
<com.android.gallery3d.app.StateManager.startState(Ljava/lang/Class;Landroid/os/Bundle;)V>
<com.android.gallery3d.app.PhotoDataAdapter.fireDataChange()V>
<com.android.gallery3d.app.AbstractGalleryActivity.onCreate(Landroid/os/Bundle;)V>
<android.nfc.tech.Ndef.getNdefMessage()Landroid/nfc/NdefMessage;>
<android.nfc.tech.NdefFormatable.close()V>
<android.nfc.tech.NdefFormatable.format(Landroid/nfc/NdefMessage;)V>
<android.nfc.tech.NdefFormatable.connect()V>
<android.content.ContentResolver.isSyncActive(Landroid/accounts/Account;Ljava/lang/String;)Z>
<android.content.ContentResolver.isSyncPending(Landroid/accounts/Account;Ljava/lang/String;)Z>
<com.google.android.mms.pdu.PduPersister.load(Landroid/net/Uri;)Lcom/google/android/mms/pdu/GenericPdu;>
<com.android.mms.model.SlideshowModel.getPduBody(Landroid/content/Context;Landroid/net/Uri;)Lcom/google/android/mms/pdu/PduBody;>
<android.accounts.AccountManager.clearPassword(Landroid/accounts/Account;)V>
<android.nfc.tech.IsoDep.setTimeout(I)V>
<android.nfc.tech.IsoDep.getTimeout()I>
<com.android.inputmethod.latin.LatinIME.onStartInputView(Landroid/view/inputmethod/EditorInfo;Z)V>
<com.android.inputmethod.latin.LatinIME.onConfigurationChanged(Landroid/content/res/Configuration;)V>
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.onSharedPreferenceChanged(Landroid/content/SharedPreferences;Ljava/lang/String;)V>
<com.android.inputmethod.latin.suggestions.MoreSuggestionsView.onTouchEvent(Landroid/view/MotionEvent;)Z>
<android.bluetooth.BluetoothDevice.getUuids()Landroid/os/ParcelUuid[];>
<android.nfc.tech.Ndef.makeReadOnly()Z>
<android.provider.Browser.updateVisitedHistory(Landroid/content/ContentResolver;Ljava/lang/String;Z)V>
<android.bluetooth.BluetoothDevice.createBond()Z>
<android.bluetooth.BluetoothHeadset.isAudioConnected(Landroid/bluetooth/BluetoothDevice;)Z>
<android.provider.ContactsContract$RawContacts.getContactLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;>
<android.provider.ContactsContract$Contacts.getLookupUri(Landroid/content/ContentResolver;Landroid/net/Uri;)Landroid/net/Uri;>
<android.bluetooth.BluetoothDevice.createInsecureRfcommSocketToServiceRecord(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;>
<android.bluetooth.BluetoothHeadset.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<android.nfc.tech.IsoDep.close()V>
<android.nfc.tech.IsoDep.connect()V>
<android.nfc.tech.IsoDep.transceive([B)[B>
<android.provider.VoicemailContract$Voicemails.buildSourceUri(Ljava/lang/String;)Landroid/net/Uri;>
<android.provider.VoicemailContract$Status.buildSourceUri(Ljava/lang/String;)Landroid/net/Uri;>
<com.android.vcard.VCardEntry.constructInsertOperations(Landroid/content/ContentResolver;Ljava/util/ArrayList;)Ljava/util/ArrayList;>
<com.android.vcard.VCardEntry.iterateOneList(Ljava/util/List;Lcom/android/vcard/VCardEntry$EntryElementIterator;)V>
<com.android.vcard.VCardEntry$EntryElementIterator.onElement(Lcom/android/vcard/VCardEntry$EntryElement;)Z>
<com.android.vcard.VCardEntry$EntryElement.constructInsertOperation(Ljava/util/List;I)V>
<com.android.vcard.VCardEntryHandler.onEntryCreated(Lcom/android/vcard/VCardEntry;)V>
<com.android.vcard.VCardEntry.isIgnorable()Z>
<com.android.vcard.VCardParser.parse(Ljava/io/InputStream;)V>
<com.android.vcard.VCardEntry.iterateAllData(Lcom/android/vcard/VCardEntry$EntryElementIterator;)V>
<android.nfc.NfcAdapter.setBeamPushUris(Landroid/net/Uri[];Landroid/app/Activity;)V>
<android.nfc.NfcAdapter.enableForegroundNdefPush(Landroid/app/Activity;Landroid/nfc/NdefMessage;)V>
<android.nfc.NfcAdapter.disableForegroundNdefPush(Landroid/app/Activity;)V>
<com.android.inputmethod.keyboard.KeyboardActionListener.onCustomRequest(I)Z>
<com.android.inputmethod.keyboard.PointerTracker.startLongPressTimer(Lcom/android/inputmethod/keyboard/Key;)V>
<com.android.inputmethod.keyboard.KeyboardView.onTouchEvent(Landroid/view/MotionEvent;)Z>
<com.android.inputmethod.keyboard.internal.KeyboardState.onPressShift()V>
<com.android.inputmethod.keyboard.PointerTracker.startRepeatKey(Lcom/android/inputmethod/keyboard/Key;)V>
<com.android.inputmethod.keyboard.PointerTracker.onDownEventInternal(IIJ)V>
<com.android.inputmethod.keyboard.internal.PointerTrackerQueue.releaseAllPointers(J)V>
<com.android.inputmethod.latin.LatinIME.onStartInputViewInternal(Landroid/view/inputmethod/EditorInfo;Z)V>
<com.android.inputmethod.keyboard.PointerTracker.onCancelEvent(IIJ)V>
<com.android.inputmethod.latin.LatinIME$UIHandler.onStartInputView(Landroid/view/inputmethod/EditorInfo;Z)V>
<com.android.inputmethod.keyboard.PointerTracker.onUpEvent(IIJ)V>
<android.net.wifi.WifiManager.pingSupplicant()Z>
<com.android.internal.telephony.CallerInfo.getCallerInfo(Landroid/content/Context;Ljava/lang/String;)I>
<com.google.android.mms.pdu.PduPersister.updateHeaders(Landroid/net/Uri;Lcom/google/android/mms/pdu/SendReq;)V>
<com.google.android.mms.pdu.PduPersister.persist(Lcom/google/android/mms/pdu/GenericPdu;Landroid/net/Uri;)Landroid/net/Uri;>
<android.media.MediaScanner.scanSingleFile(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri;>
<com.android.internal.telephony.ITelephony$Stub.endCall()Z>
<com.android.internal.telephony.ITelephony$Stub.isSimPinEnabled()Z>
<com.android.internal.telephony.ITelephony$Stub.enableDataConnectivity()Z>
<com.android.internal.telephony.ITelephony$Stub.disableDataConnectivity()Z>
<com.android.internal.telephony.ITelephony$Stub.getCellLocation()Landroid/os/Bundle;>
<android.provider.Settings$System.putFloat(Landroid/content/ContentResolver;Ljava/lang/String;F)Z>
<android.net.ConnectivityManager.setMobileDataEnabled(Z)V>
<android.net.ConnectivityManager.getMobileDataEnabled()Z>
<android.nfc.tech.NdefFormatable.formatReadOnly(Landroid/nfc/NdefMessage;)V>
<android.media.AsyncPlayer.stop()V>
<android.bluetooth.BluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;>
<com.android.internal.telephony.ISms$Stub.disableCellBroadcast(I)Z>
<com.android.internal.telephony.ISms$Stub.copyMessageToIccEf(I[B[B)Z>
<com.android.internal.telephony.ISms$Stub.sendText(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.internal.telephony.ISms.sendMultipartText(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V>
<com.android.internal.telephony.ISms$Stub.updateMessageOnIccEf(II[B)Z>
<com.android.internal.telephony.ISms$Stub.enableCellBroadcastRange(II)Z>
<com.android.internal.telephony.ISms$Stub.disableCellBroadcastRange(II)Z>
<com.android.internal.telephony.ISms.sendText(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.internal.telephony.ISms$Stub.sendData(Ljava/lang/String;Ljava/lang/String;I[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.internal.telephony.ISms$Stub.getAllMessagesFromIccEf()Ljava/util/List;>
<com.android.internal.telephony.ISms$Stub.enableCellBroadcast(I)Z>
<com.android.internal.telephony.ISms$Stub.sendMultipartText(Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V>
<com.android.inputmethod.latin.LatinIME.initSuggest()V>
<com.android.inputmethod.latin.LatinIME.handleBackspace(I)V>
<com.android.inputmethod.latin.LatinIME.handleSeparator(IIII)Z>
<com.android.inputmethod.latin.LatinIME.onCodeInput(III)V>
<com.android.inputmethod.latin.LatinIME.handleCharacter(IIII)V>
<android.provider.Browser.clearSearches(Landroid/content/ContentResolver;)V>
<android.net.wifi.WifiManager.isWifiApEnabled()Z>
<android.net.wifi.WifiManager.setWifiApEnabled(Landroid/net/wifi/WifiConfiguration;Z)Z>
<android.bluetooth.BluetoothAdapter.setName(Ljava/lang/String;)Z>
<android.net.wifi.WifiManager.getWifiApState()I>
<com.android.internal.telephony.ITelephony.disableDataConnectivity()Z>
<com.android.internal.telephony.ITelephony.enableDataConnectivity()Z>
<com.android.internal.telephony.ITelephony$Stub.call(Ljava/lang/String;)V>
<com.android.internal.telephony.ITelephony$Stub.getNeighboringCellInfo()Ljava/util/List;>
<com.android.mms.ui.SlideViewInterface.setVideo(Ljava/lang/String;Landroid/net/Uri;)V>
<com.android.mms.ui.SlideViewInterface.setAudio(Landroid/net/Uri;Ljava/lang/String;Ljava/util/Map;)V>
<com.google.common.io.Files.move(Ljava/io/File;Ljava/io/File;)V>
<com.google.common.io.Resources.toString(Ljava/net/URL;C)Ljava/lang/String;>
<android.provider.Settings$Secure.putFloat(Landroid/content/ContentResolver;Ljava/lang/String;F)Z>
<android.provider.Settings$Secure.putLong(Landroid/content/ContentResolver;Ljava/lang/String;J)Z>
<com.google.common.io.Files.readFirstLine(Ljava/io/File;C)Ljava/lang/String;>
<android.net.ConnectivityManager.getNetworkPreference()I>
<android.telephony.gsm.SmsManager.sendMultipartTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;Ljava/util/ArrayList;)V>
<com.android.inputmethod.keyboard.PointerTracker.onDownEvent(IIJI)V>
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.dispatchHoverEvent(Landroid/view/MotionEvent;I)Z>
<com.android.inputmethod.accessibility.AccessibilityEntityProvider.simulateKeyPress(Lcom/android/inputmethod/keyboard/Key;)V>
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.onTransitionKey(Lcom/android/inputmethod/keyboard/Key;Lcom/android/inputmethod/keyboard/Key;Landroid/view/MotionEvent;)Z>
<com.android.inputmethod.latin.ContactsBinaryDictionary.loadDictionary()V>
<com.android.inputmethod.accessibility.AccessibilityEntityProvider.performActionForKey(Lcom/android/inputmethod/keyboard/Key;ILandroid/os/Bundle;)Z>
<com.android.inputmethod.latin.ExpandableBinaryDictionary.access$500(Lcom/android/inputmethod/latin/ExpandableBinaryDictionary;)Lcom/android/inputmethod/latin/ExpandableBinaryDictionary$DictionaryUpdateController;>
<com.android.inputmethod.accessibility.AccessibleKeyboardViewProxy.onHoverKey(Lcom/android/inputmethod/keyboard/Key;Landroid/view/MotionEvent;)Z>
<com.android.inputmethod.latin.SynchronouslyLoadedContactsBinaryDictionary.<init>(Landroid/content/Context;Ljava/util/Locale;)V>
<com.android.inputmethod.latin.SynchronouslyLoadedUserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V>
<com.android.inputmethod.latin.spellcheck.AndroidSpellCheckerService.startUsingContactsDictionaryLocked()V>
<com.android.inputmethod.latin.UserBinaryDictionary.loadDictionary()V>
<com.android.inputmethod.keyboard.internal.KeyboardState.onPressKey(IZI)V>
<com.android.inputmethod.latin.ContactsBinaryDictionary.getContactCount()I>
<com.android.inputmethod.latin.UserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;Z)V>
<com.android.inputmethod.latin.ExpandableBinaryDictionary.hasContentChanged()Z>
<com.android.inputmethod.latin.SubtypeSwitcher.updateParametersOnStartInputView()V>
<com.android.inputmethod.latin.ExpandableBinaryDictionary.loadDictionaryAsync()V>
<com.android.inputmethod.keyboard.KeyboardActionListener.onCodeInput(III)V>
<com.android.inputmethod.latin.UserBinaryDictionary.<init>(Landroid/content/Context;Ljava/lang/String;)V>
<android.provider.Contacts$People.addToMyContactsGroup(Landroid/content/ContentResolver;J)Landroid/net/Uri;>
<android.widget.VideoView.setVideoURI(Landroid/net/Uri;Ljava/util/Map;)V>
<android.nfc.tech.NfcF.connect()V>
<android.nfc.tech.NfcF.close()V>
<android.nfc.tech.NfcF.transceive([B)[B>
<android.bluetooth.IBluetoothHeadset$Stub.getPriority(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.IBluetoothHeadset$Stub.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.IBluetoothA2dp$Stub.connect(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothA2dp$Stub.isA2dpPlaying(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothHeadset$Stub.createIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothA2dp$Stub.suspendSink(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothA2dp$Stub.resumeSink(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothHeadset$Stub.connect(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothHeadset$Stub.connectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothHeadset$Stub.getConnectedDevices()Ljava/util/List;>
<android.bluetooth.IBluetoothHeadset$Stub.getBatteryUsageHint(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.IBluetoothA2dp$Stub.getPriority(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.IBluetoothHeadset$Stub.isAudioConnected(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothHeadset$Stub.stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothHeadset$Stub.disconnect(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothHeadset$Stub.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z>
<android.bluetooth.IBluetoothHeadset$Stub.startScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothHeadset$Stub.disconnectHeadsetInternal(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothHeadset$Stub.stopScoUsingVirtualVoiceCall(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothA2dp$Stub.getConnectionState(Landroid/bluetooth/BluetoothDevice;)I>
<android.bluetooth.IBluetoothHeadset$Stub.startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothHeadset$Stub.acceptIncomingConnect(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothA2dp$Stub.setPriority(Landroid/bluetooth/BluetoothDevice;I)Z>
<android.bluetooth.IBluetoothA2dp$Stub.disconnect(Landroid/bluetooth/BluetoothDevice;)Z>
<android.bluetooth.IBluetoothHeadset$Stub.getDevicesMatchingConnectionStates([I)Ljava/util/List;>
<com.android.camera.LocationManager.recordLocation(Z)V>
<com.android.camera.LocationManager.startReceivingLocationUpdates()V>
<com.android.camera.ShutterButton.performClick()Z>
<com.android.internal.telephony.ITelephony.call(Ljava/lang/String;)V>
<android.provider.CalendarContract$EventDays.query(Landroid/content/ContentResolver;IILjava/lang/String[];)Landroid/database/Cursor;>
<android.provider.Browser.getAllBookmarks(Landroid/content/ContentResolver;)Landroid/database/Cursor;>
<android.provider.Browser.getAllVisitedUrls(Landroid/content/ContentResolver;)Landroid/database/Cursor;>
<android.provider.Browser.deleteFromHistory(Landroid/content/ContentResolver;Ljava/lang/String;)V>
<android.provider.Browser.canClearHistory(Landroid/content/ContentResolver;)Z>
<android.provider.Contacts$People.queryGroups(Landroid/content/ContentResolver;J)Landroid/database/Cursor;>
<android.telephony.gsm.SmsManager.sendDataMessage(Ljava/lang/String;Ljava/lang/String;S[BLandroid/app/PendingIntent;Landroid/app/PendingIntent;)V>
<com.android.internal.app.IBatteryStats$Stub.getStatistics()[B>
<com.android.internal.app.IBatteryStats$Stub.getAwakeTimeBattery()J>
<com.android.internal.app.IBatteryStats$Stub.setBatteryState(IIIIII)V>
<com.android.internal.app.IBatteryStats$Stub.noteBluetoothOn()V>
<com.android.internal.app.IBatteryStats$Stub.getAwakeTimePlugged()J>
<android.provider.Contacts$Settings.getSetting(Landroid/content/ContentResolver;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;>
<android.view.IWindowManager$Stub.dismissKeyguard()V>
<android.view.IWindowManager$Stub.disableKeyguard(Landroid/os/IBinder;Ljava/lang/String;)V>
<android.app.INotificationManager$Stub.enqueueNotificationWithTag(Ljava/lang/String;Ljava/lang/String;ILandroid/app/Notification;[I)V>
<android.view.IWindowManager$Stub.freezeRotation(I)V>
<android.view.IWindowManager$Stub.clearForcedDisplaySize()V>
<com.android.internal.statusbar.IStatusBarService$Stub.collapse()V>
<android.app.INotificationManager$Stub.enqueueNotification(Ljava/lang/String;ILandroid/app/Notification;[I)V>
<com.android.internal.statusbar.IStatusBarService$Stub.expand()V>
<android.view.IWindowManager$Stub.reenableKeyguard(Landroid/os/IBinder;)V>
<android.view.IWindowSession$Stub.performDrag(Landroid/view/IWindow;Landroid/os/IBinder;FFFFLandroid/content/ClipData;)Z>
<android.view.IWindowManager$Stub.setForcedDisplaySize(II)V>
<android.view.IWindowManager$Stub.thawRotation()V>
<android.view.IWindowManager$Stub.setNewConfiguration(Landroid/content/res/Configuration;)V>
<android.view.IWindowManager$Stub.prepareAppTransition(IZ)V>
<android.view.IWindowManager$Stub.exitKeyguardSecurely(Landroid/view/IOnKeyguardExitResult;)V>
<android.telephony.TelphonyManager.getSimCountryIso()Ljava/lang/String;>
<android.telephony.gsm.SmsMessage.getMessageBody()Ljava/lang/String;>
<android.content.pm.PackageManager.getPackageInfo(Ljava/lang/String;I)Ljava/lang/String;>
<dalvik.system.DexClassLoader.loadClass(Ljava/lang/String;)Ljava/lang/Class;>